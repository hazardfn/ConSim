{"name":"Consim","tagline":"A Console Simulator for education purposes.","body":"# Overview | [Travis-CI](https://travis-ci.org/hazardfn/ConSim) :: ![Build Status](https://travis-ci.org/hazardfn/ConSim.svg)\r\n--------\r\nConSim is a Console Simulator for education purposes - this suite allows you to create lessons with a group of tasks and use them\r\nto illustrate the versaility of a terminal in a closed and controlled environment.\r\n\r\nFeatures\r\n--------\r\n * Set up multiple lessons consisting of a group of tasks which a student must complete to advance.\r\n * Supports multiple modules allowing you to, in theory, write your own basic language to demonstrate simple terminal commands.\r\n * Comes with a Windows module which will forward commands to cmd and print the output.\r\n * Limit the allowed commands and even filter the arguments to prevent any dangerous commands being run.\r\n * Comes with a Bash module for forwarding commands to bash.\r\n * Use the expected result field to control expected output used for passing tasks.\r\n * Can use the error output to compare to the expected output if you wish to demonstrate errors.\r\n * Can use the command itself as a comparison if you wish to just check the student put in the right command to pass the task.\r\n * Sandbox mode allows you to have an open ended session not dependant on task completion. (Simply give a lesson with no tasks).\r\n\r\nUsage\r\n--------\r\n You may choose to use ConSim.Shell as your basic interpreter or write a more personalised one for your environment,  regardless, the file structure must be as follows:\r\n\r\n ```\r\n => Lesson\r\n ==> Lesson.json\r\n ==> Modules\r\n ===> [Module DLL's]\r\n ```\r\n\r\n Lesson.json looks like so:\r\n\r\n ````json\r\n {\r\n  \"AllowedModules\": [\r\n    {\r\n      \"__type\": \"clsModule:#Classes\",\r\n      \"filename\": \"ConSim.Test.Module.dll\",\r\n      \"gettype\": \"Modules.TestModule\",\r\n      \"commands\": []\r\n    }\r\n  ],\r\n  \"Name\": \"TestLesson\",\r\n  \"Tasks\": [\r\n    {\r\n      \"ExpectedResult\": \"true\",\r\n      \"LongDescription\": \"This is a long description\",\r\n      \"Name\": \"taskness\",\r\n      \"ShortDescription\": \"This is short\",\r\n      \"allowedCommands\": [\r\n    \r\n      ],\r\n      \"commandToTask\": false,\r\n      \"disallowedStrings\": [\r\n    \r\n      ],\r\n      \"errorToTask\": false,\r\n      \"lazyMatching\": false,\r\n      \"regexMatching\": false\r\n    }\r\n  ],\r\n  \"Version\": \"TEST\",\r\n}\r\n ````\r\n\r\n Lesson\r\n---------\r\n The lesson itself only contains 2 datafields (Name & Version) they are pretty self explanatory:\r\n\r\n **Name**: Name of the lesson - shown in ConSim.Shell.\r\n \r\n **Version**: Version of the lesson - shown next to the name in ConSim.Shell.\r\n\r\n\r\n Allowed Modules\r\n----------\r\n Allowed modules is an array, multiple entries can be added using the following fields:\r\n\r\n **__type**: You should not change, this is so the json deserializer knows the type to deserialize to.\r\n \r\n **filename**: This is the name of the dll file this entry relates to. Must be placed in the modules directory.\r\n \r\n **gettype**: This should be the \"Namespace.Class\" of this module which can be determined in the source code.\r\n\r\n **commands**: A list of overall commands the module can be given.\r\n\r\n _NOTE: Some modules may only provide a certain set of commands whereas others may be more open which is why\r\n it was decided to give you the option to decide what commands to pass to the module. Review the documentation\r\n for the module you are using for information_\r\n\r\n Tasks\r\n----------\r\n Tasks is also an array and is where the main portion of the activities are defined, see below for field documentation:\r\n\r\n **__type**: You should not change, this is so the json deserializer knows the type to deserialize to.\r\n \r\n **ExpectedResult**: The result required from the module/console/terminal before the task is passed.\r\n \r\n **LongDescription**: A lengthy description of the task, you can include the expected result here if you wish.\r\n \r\n **Name**: The name of the task.\r\n \r\n **ShortDescription**: A short description of the task, printed above the long one in ConSim.\r\n \r\n **allowedCommands**: A list of allowed commands out of the ones the modules provides (set above). Empty implies all are allowed.\r\n \r\n **commandToTask**: Set to true if your expected result analysis is on the command itself as opposed to the output.\r\n \r\n **errorToTask**: Set to true if your expected result analysis is on an error that should be returned as opposed to the output.\r\n \r\n **lazyMatching**: Set to true if you just want to match part of the output (can be combined with command and error to task).\r\n\r\n **regexMatching**: Set to true if your expected result is a regex pattern.\r\n\r\n_NOTE: Matching flows as following in the cases where lazy and regex are set to true:_\r\n_regex -> lazy -> exact_\r\n\r\nLoading the TestLesson\r\n--------\r\n Loading the test lesson with ConSim can be a good way for you to experiment and see how things work. Simply open a  terminal and type the following:\r\n\r\n ```\r\n ConSim.Shell.exe -l \"ConSim.NUnit/bin/[Release | Debug]/Lessons/TestLesson/TestLesson.json\"\r\n ```\r\n ![Example](http://imageshack.com/a/img538/5817/Z4qTKj.png)\r\n\r\n The expected result is 2, the test module increments an argument by 1 so supplying the command \"increment 1\" should  pass the task.\r\n\r\nHow To Contribute\r\n--------\r\nTo contribute, the following criteria needs to be fulfilled:\r\n\r\n* Description regarding what has been changed and why\r\n* Generic code must be cross-platform compatible\r\n* OS-Specific modules (such as the Windows Module) should be tested in the correct OS.\r\n* Your IDE should be set to the following standards (using Xamarin this will be done automatically):\r\n\t* 80 char file width\r\n\t* Tab and Indent length of 2\r\n\t* Tabs to Spaces\r\n\t* Disallow tabs after non-tabs\r\n\t* Trim Trailing Whitespace\r\n* New features and bug fixes must have accompanying unit tests:\r\n\t* Positive tests\r\n\t* Negative tests\r\n\t* Boundary tests (if possible)\r\n\t* No less than 90% decision coverage\r\n\t* All unit tests should pass\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}